name: Deploy to Amazon ECS

on:
  push
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    #environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
         AWS_REGION: us-east-1
         ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
         
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#-----------------------------------------------------------
      - name: Install AWS CLI jq
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      # - name: Fetch current task definition
      #   id: get-task-def
      #   run: |
      #     aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} \
      #     --query 'taskDefinition' > ecs_task_definition.json
      #     cat ecs_task_definition.json
      # - name: Update container image in task definition
      #   run: |
      #    jq --arg IMAGE_URI "${{ steps.build-image.outputs.image }}" \
      #    --arg CONTAINER_NAME "${{ vars.CONTAINER_NAME }}" \
      #       '.containerDefinitions |= map(if .name == $CONTAINER_NAME then .image = $IMAGE_URI else . end) | del(.taskDefinitionArn,.revision,.status,.requiresAttributes, .compatibilities, .registeredAt, .registeredBy,  .deregisteredAt)'  ecs_task_definition.json > new_task_definition.json
            
      # - name: Register new task definition
      #   id: register-task-def
      #   run: |
      #     TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new_task_definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
      #     echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
# ###############
      - name: fatch, update task-definition, 
        run: | 
          TASK_DEFINITION=\$(aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION}} --region=us-east-1)
          NEW_TASK_DEFINTIION=\$(echo \$TASK_DEFINITION | jq --arg IMAGE 654654575882.dkr.ecr.\us-east-1.amazonaws.com/new-ecr:\$hash '.taskDefinition | .containerDefinitions[0].image = \$IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
          aws ecs register-task-definition --region=us-east-1 --cli-input-json "\$NEW_TASK_DEFINTIION"
          aws ecs update-service --cluster \python_ecs_cluster --service \python_service --task-definition \${{ vars.ECS_TASK_DEFINITION}} --region=us-east-1
          shell: /bin/bash -e {0}
#-----------------------------------
      # - name: Log task definition ARN
      #   run: |
      #     echo "Task Definition ARN: ${{ env.TASK_DEF_ARN }}"

      # - name: Deploy Amazon ECS task definition
      # # Update the ECS service with the new task definition
      #   run: |
      #     aws ecs update-service \
      #      --cluster python_ecs_cluster \
      #      --service python_service \
      #      --task-definition ${{ env.TASK_DEF_ARN }} \
      #      --force-new-deployment \
      #      --region us-east-1 #$AWS_REGION 
# #--task-definition ${{ env.TASK_DEF_ARN }} \
